// Generated by CoffeeScript 1.3.3
(function() {

  if (!(window.mem0r1es != null)) {
    window.mem0r1es = {};
  }

  window.indexedDB = window.webkitIndexedDB;

  window.IDBTransaction = window.webkitIDBTransaction;

  window.IDBKeyRange = window.webkitIDBKeyRange;

  window.mem0r1es.StorageManager = (function() {

    function StorageManager() {}

    StorageManager.db = null;

    StorageManager.version = null;

    StorageManager.ready = false;

    StorageManager.prototype.openDB = function() {
      var request,
        _this = this;
      request = indexedDB.open("mem0r1es");
      request.onsuccess = function(event) {
        _this.db = event.target.result;
        _this.version = 2;
        _this.checkVersion();
        _this.ready = true;
      };
      request.onfailure = this.onerror;
    };

    StorageManager.prototype.checkVersion = function() {
      var setVersionrequest,
        _this = this;
      if (parseInt(this.version, 10) !== parseInt(this.db.version, 10)) {
        setVersionrequest = this.db.setVersion(this.version);
        setVersionrequest.onfailure = this.onerror;
        setVersionrequest.onsuccess = function(event) {
          var consolidated, temporary;
          console.log("creating/updating data store");
          temporary = _this.db.createObjectStore("temporary", {
            autoIncrement: true
          });
          consolidated = _this.db.createObjectStore("consolidated", {
            autoIncrement: true
          });
          event.target.transaction.oncomplete = function() {
            console.log("data store created");
          };
          event.target.transaction.onerror = _this.onerror;
        };
      } else {
        console.log("data store ready");
      }
    };

    StorageManager.prototype.onerror = function() {
      return console.log("ERROR");
    };

    StorageManager.prototype.onMessage = function(message, sendResponse) {
      console.log("message " + message.title);
      switch (message.title) {
        case "clearDB":
          this.clearDatabase(sendResponse);
          break;
        default:
          console.log("Could not understand the command " + message.title);
      }
    };

    StorageManager.prototype.isReady = function() {
      return this.ready;
    };

    StorageManager.prototype.clearDatabase = function(sendResponse) {
      this.clearStore("temporary");
      this.clearStore("consolidated");
      return sendResponse({
        message: {
          title: "message from networkManager",
          content: "Database cleared",
          level: "success"
        }
      });
    };

    StorageManager.prototype.clearStore = function(storeName) {
      var clearReq, store, trans;
      if (!this.isReady) {
        return false;
      }
      trans = this.db.transaction([storeName], "readwrite");
      store = trans.objectStore(storeName);
      if (store != null) {
        clearReq = store.clear();
        clearReq.onsuccess = function(event) {
          console.log("" + storeName + " cleared");
        };
        clearReq.onerror = function(event) {
          console.log("error while clearing " + storeName);
        };
      }
    };

    StorageManager.prototype.store = function(storeName, value) {
      var request, store, trans;
      trans = this.db.transaction([storeName], "readwrite");
      store = trans.objectStore(storeName);
      request = store.put(value);
      request.onsuccess = function(event) {
        console.log("" + value + " [STORED]");
      };
      request.onerror = this.onerror;
    };

    StorageManager.prototype.get = function(storeName, key, value, callback) {
      var index, result, singleKeyRange, store, trans;
      result = new Array;
      singleKeyRange = IDBKeyRange.only(value);
      trans = this.db.transaction([storeName], "readonly");
      store = trans.objectStore(storeName);
      index = store.index(key);
      index.openCursor(singleKeyRange).onsuccess = function(event) {
        var cursor;
        cursor = event.target.result;
        if (cursor != null) {
          results[results.length] = cursor.value;
          cursor["continue"];
        } else {
          callback(results);
        }
      };
    };

    return StorageManager;

  })();

}).call(this);
